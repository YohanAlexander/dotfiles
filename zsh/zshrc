# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/yohan/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="spaceship"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git sudo fzf-tab autojump fast-syntax-highlighting zsh-autosuggestions zsh-completions vi-mode)
source $ZSH/oh-my-zsh.sh
source ~/.forgit.zsh
export GOBIN=~/go/bin && export PATH=$PATH:~/go/bin
enable-fzf-tab && autoload -U compinit && compinit

# User configurations
SPACESHIP_TIME_SHOW="true"
SPACESHIP_EXIT_CODE_SHOW="true"

# export MANPATH="/usr/local/man:$MANPATH"
# You may need to manually set your language environment
export LANG=en_US.UTF-8
export LC_MESSAGES="C"

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='nvim'
else
    export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# >>> Dotfiles initialize >>>
# !! Contents within this block are managed by 'Dotfiles init' !!
    alias ls="lsd"
    alias cat="bat"
    alias diff="delta"
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
    TIMEFMT=$'\n================\nCPU\t%P\nuser\t%*Us\nsystem\t%*Ss\ntotal\t%*Es\nmemory\t%MMB'
    findf() {
        local line
        line=`ag --color " " | fzf --ansi` \
            && nvim $(cut -d':' -f1 <<< "$line") +$(cut -d':' -f2 <<< "$line")
    }
    zle -N findf
    bindkey '^f' findf
# <<< Dotfiles initialize <<<

# >>> Kitty initialize >>>
# !! Contents within this block are managed by 'Kitty init' !!
    alias ssh="kitty +kitten ssh"
    alias icat="kitty +kitten icat"
    alias emoji="kitty +kitten unicode_input"
# <<< Kitty initialize <<<

# >>> Docker initialize >>>
# !! Contents within this block are managed by 'Docker init' !!
    alias runc="bash ~/dotfiles/fzf/docker.sh runc"
    alias stopc="bash ~/dotfiles/fzf/docker.sh stopc"
    alias runinc="bash ~/dotfiles/fzf/docker.sh runinc"
    alias showipc="bash ~/dotfiles/fzf/docker.sh showipc"
# <<< Docker initialize <<<

# >>> Git initialize >>>
# !! Contents within this block are managed by 'Git init' !!
    alias gdiff="git difftool --no-symlinks --dir-diff"
    alias gcheck="git for-each-ref --format='%(refname:short)' refs/heads | fzf | xargs git checkout"
    gsync() {
        git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done ; git fetch --all ; git pull --all ;
    }
    grebase() {
        git rebase -i $(git log --pretty=oneline --color=always | fzf --ansi | cut -d ' ' -f1)^ ;
    }
    gfixup() {
        target=$(git log --pretty=format:'%h %s' --no-merges | fzf --preview "echo {} | cut -f 1 -d' ' | xargs -I SHA git show --color=always --pretty=fuller --stat SHA" | awk '{ print $1 }')
        if [[ $target != '' ]]; then
            git commit --fixup $(echo $target)
            git rebase -i --autosquash $(echo $target~)
        fi
    }
    gstash() {
        local out q k sha
        while out=$(
        git stash list --pretty="%C(yellow)%h %>(14)%Cgreen%cr %C(blue)%gs" |
        fzf --cycle --ansi --no-sort --query="$q" --print-query \
            --expect=ctrl-d,ctrl-b);
        do
        q=$(head -1 <<< "$out")
        k=$(head -2 <<< "$out" | tail -1)
        sha=$(tail -1 <<< "$out" | cut -d' ' -f1)
        [ -z "$sha" ] && continue
        if [ "$k" = 'ctrl-d' ]; then
            git diff $sha
        elif [ "$k" = 'ctrl-b' ]; then
            git stash branch "stash-$sha" $sha
            break;
        else
            git stash show -p $sha
        fi
        done
    }
# <<< Git initialize <<<

# >>> FZF initialize >>>
# !! Contents within this block are managed by 'FZF init' !!
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    export FZF_DEFAULT_OPS="--extended"
    export FZF_DEFAULT_COMMAND="fd --type file --follow --hidden --exclude .git --color=always"
    export FZF_CTRL_T_OPTS="--ansi"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
# <<< FZF initialize <<<

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/usr/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/usr/etc/profile.d/conda.sh" ]; then
        . "/usr/etc/profile.d/conda.sh"
    else
        export PATH="/usr/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
